                      | #######################################################################
                      | # Test for copying block of size 0;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f468020000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f568020000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f000000000 | 	irmovl $0, %eax		# src and dst have 0 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f024020000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f018020000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802f000000   | 	call ncopy		 
  0x029: 8028010000   | 	call check	        # Call checker code
  0x02e: 00           | 	halt                    # should halt with 0xaaaa in %eax
  0x02f:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02f: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x031: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x033: a06f         | 	pushl %esi		# Save callee-save regs
  0x035: a03f         | 	pushl %ebx
  0x037: a07f         | 	pushl %edi
  0x039: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03f: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x045: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x04b: 6300         | 	xorl %eax,%eax		# count = 0;
  0x04d: 2027         | 	rrmovl %edx, %edi
  0x04f: c0f7fcffffff | 	iaddl $-4, %edi
  0x055: 6277         | 	andl %edi,%edi		# len < 4?
  0x057: 72e1000000   | 	jl End		# if so, goto Done:
                      | 
  0x05c: 506300000000 | Ele1:	mrmovl (%ebx), %esi	# read val1 from src...
  0x062: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x068: 6266         | 	andl %esi, %esi		# val <= 0?
  0x06a: 7175000000   | 	jle Ele2		# if so, goto Ele2:
  0x06f: c0f001000000 | 	iaddl $1, %eax		# count++
  0x075: 506304000000 | Ele2:	mrmovl 4(%ebx), %esi	# read val1 from src...
  0x07b: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x081: 6266         | 	andl %esi, %esi		# val <= 0?
  0x083: 718e000000   | 	jle Ele3		# if so, goto Npos:
  0x088: c0f001000000 | 	iaddl $1, %eax		# count++
  0x08e: 506308000000 | Ele3:	mrmovl 8(%ebx), %esi	# read val1 from src...
  0x094: 406108000000 | 	rmmovl %esi, 8(%ecx)	# ...and store it to dst
  0x09a: 6266         | 	andl %esi, %esi		# val <= 0?
  0x09c: 71a7000000   | 	jle Ele4		# if so, goto Npos:
  0x0a1: c0f001000000 | 	iaddl $1, %eax		# count
  0x0a7: 50630c000000 | Ele4:	mrmovl 12(%ebx), %esi	# read val1 from src...
  0x0ad: 40610c000000 | 	rmmovl %esi, 12(%ecx)	# ...and store it to dst
  0x0b3: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0b5: 71c0000000   | 	jle Reapt		# if so, goto Npos:
  0x0ba: c0f001000000 | 	iaddl $1, %eax		# count
  0x0c0:              | Reapt:
  0x0c0: c0f2fcffffff | 	iaddl $-4, %edx		# len-=4
  0x0c6: c0f310000000 | 	iaddl $16, %ebx		# src+=4
  0x0cc: c0f110000000 | 	iaddl $16, %ecx		# dst+=4
  0x0d2: 2027         | 	rrmovl %edx, %edi
  0x0d4: c0f7fdffffff | 	iaddl $-3, %edi
  0x0da: 6277         | 	andl %edi, %edi		# len > 3?
  0x0dc: 765c000000   | 	jg Ele1			# if so, goto Loop:
                      | 
  0x0e1:              | End:
  0x0e1: 6222         | andl %edx,%edx		# len <= 0?
  0x0e3: 711d010000   | 	jle Done		# if so, goto Done:
                      | 
  0x0e8: 506300000000 | Loop:	mrmovl (%ebx), %esi	# read val from src...
  0x0ee: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x0f4: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0f6: 7103010000   | 	jle Npos		# if so, goto Npos:
  0x0fb: 30f701000000 | 	irmovl $1, %edi
  0x101: 6070         | 	addl %edi, %eax		# count++
  0x103: 30f701000000 | Npos:	irmovl $1, %edi
  0x109: 6172         | 	subl %edi, %edx		# len--
  0x10b: 30f704000000 | 	irmovl $4, %edi
  0x111: 6073         | 	addl %edi, %ebx		# src++
  0x113: 6071         | 	addl %edi, %ecx		# dst++
  0x115: 6222         | 	andl %edx,%edx		# len > 0?
  0x117: 76e8000000   | 	jg Loop			# if so, goto Loop:
  0x11c:              | Halt:
  0x11c: 00           | 	halt
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x11d:              | Done:
  0x11d: b07f         | 	popl %edi               # Restore callee-save registers
  0x11f: b03f         | 	popl %ebx
  0x121: b06f         | 	popl %esi
  0x123: 2054         | 	rrmovl %ebp, %esp
  0x125: b05f         | 	popl %ebp
  0x127: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x128:              | End:
                      | #/* $end ncopy-ys */
  0x128:              | EndFun:
                      | #################################################################### 
                      | # Epilogue code for the correctness testing driver
                      | ####################################################################
                      | 
                      | # This is the correctness checking code.
                      | # It checks:
                      | #   1. %eax has 0.  Set %eax to 0xbbbb if not.
                      | #   2. The total length of the code is less than or equal to 1000.
                      | #      Set %eax to 0xcccc if not.
                      | #   3. The source data was copied to the destination.
                      | #      Set %eax to 0xdddd if not.
                      | #   4. The words just before and just after the destination region
                      | #      were not corrupted.  Set %eax to 0xeeee if not.
                      | # If all checks pass, then sets %eax to 0xaaaa
  0x128:              | check:
  0x128: a05f         | 	pushl %ebp
  0x12a: 2045         | 	rrmovl %esp,%ebp
  0x12c: a06f         | 	pushl %esi
  0x12e: a03f         | 	pushl %ebx
  0x130: a07f         | 	pushl %edi
                      | 	# Return value test
  0x132: 30f200000000 | 	irmovl $0,%edx
  0x138: 6120         | 	subl %edx,%eax
  0x13a: 734a010000   | 	je checkb
  0x13f: 30f0bbbb0000 | 	irmovl $0xbbbb,%eax  # Failed test #1
  0x145: 700c020000   | 	jmp cdone
  0x14a:              | checkb:
                      | 	# Code length check
  0x14a: 30f028010000 | 	irmovl EndFun,%eax
  0x150: 30f22f000000 | 	irmovl StartFun,%edx
  0x156: 6120         | 	subl %edx,%eax
  0x158: 30f2e8030000 | 	irmovl $1000,%edx
  0x15e: 6102         | 	subl %eax,%edx
  0x160: 7570010000   | 	jge checkm
  0x165: 30f0cccc0000 | 	irmovl $0xcccc,%eax  # Failed test #2
  0x16b: 700c020000   | 	jmp cdone
  0x170:              | checkm:
  0x170: 30f224020000 | 	irmovl dest, %edx # Pointer to next destination location
  0x176: 30f318020000 | 	irmovl src,%ebx   # Pointer to next source location
  0x17c: 30f700000000 | 	irmovl $0,%edi  # Count
  0x182: 6277         | 	andl %edi,%edi
  0x184: 73be010000   | 	je checkpre         # Skip check if count = 0
  0x189:              | mcloop:
  0x189: 500200000000 | 	mrmovl (%edx),%eax
  0x18f: 506300000000 | 	mrmovl (%ebx),%esi
  0x195: 6160         | 	subl %esi,%eax
  0x197: 73a7010000   | 	je  mok
  0x19c: 30f0dddd0000 | 	irmovl $0xdddd,%eax # Failed test #3
  0x1a2: 700c020000   | 	jmp cdone
  0x1a7:              | mok:
  0x1a7: 30f004000000 | 	irmovl $4,%eax
  0x1ad: 6002         | 	addl %eax,%edx	  # dest ++
  0x1af: 6003         | 	addl %eax,%ebx    # src++
  0x1b1: 30f001000000 | 	irmovl $1,%eax
  0x1b7: 6107         | 	subl %eax,%edi    # cnt--
  0x1b9: 7689010000   | 	jg mcloop
  0x1be:              | checkpre:
                      | 	# Check for corruption
  0x1be: 30f220020000 | 	irmovl Predest,%edx
  0x1c4: 500200000000 | 	mrmovl (%edx), %eax  # Get word before destination
  0x1ca: 30f2fadebc00 | 	irmovl $0xbcdefa, %edx
  0x1d0: 6120         | 	subl %edx,%eax
  0x1d2: 73e2010000   | 	je checkpost
  0x1d7: 30f0eeee0000 | 	irmovl $0xeeee,%eax  # Failed test #4
  0x1dd: 700c020000   | 	jmp cdone
  0x1e2:              | checkpost:
                      | 	# Check for corruption
  0x1e2: 30f224020000 | 	irmovl Postdest,%edx
  0x1e8: 500200000000 | 	mrmovl (%edx), %eax  # Get word after destination
  0x1ee: 30f2bcfade00 | 	irmovl $0xdefabc, %edx
  0x1f4: 6120         | 	subl %edx,%eax
  0x1f6: 7306020000   | 	je checkok
  0x1fb: 30f0eeee0000 | 	irmovl $0xeeee,%eax # Failed test #4
  0x201: 700c020000   | 	jmp cdone
  0x206:              | checkok:
                      | 	# Successful checks
  0x206: 30f0aaaa0000 | 	irmovl $0xaaaa,%eax
  0x20c:              | cdone:
  0x20c: b07f         | 	popl %edi
  0x20e: b03f         | 	popl %ebx
  0x210: b06f         | 	popl %esi
  0x212: 2054         | 	rrmovl %ebp, %esp
  0x214: b05f         | 	popl %ebp
  0x216: 90           | 	ret
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x218:              | 	.align 4
  0x218:              | src:
  0x218: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x220:              | 	.align 16
  0x220:              | Predest:
  0x220: fadebc00     | 	.long 0xbcdefa
  0x224:              | dest:
  0x224:              | Postdest:
  0x224: bcfade00     | 	.long 0xdefabc
                      | 
  0x228:              | .align 4
                      | # Run time stack
  0x228: 00000000     | 	.long 0
  0x22c: 00000000     | 	.long 0
  0x230: 00000000     | 	.long 0
  0x234: 00000000     | 	.long 0
  0x238: 00000000     | 	.long 0
  0x23c: 00000000     | 	.long 0
  0x240: 00000000     | 	.long 0
  0x244: 00000000     | 	.long 0
  0x248: 00000000     | 	.long 0
  0x24c: 00000000     | 	.long 0
  0x250: 00000000     | 	.long 0
  0x254: 00000000     | 	.long 0
  0x258: 00000000     | 	.long 0
  0x25c: 00000000     | 	.long 0
  0x260: 00000000     | 	.long 0
  0x264: 00000000     | 	.long 0
                      | 
  0x268:              | Stack:
